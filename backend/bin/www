#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('backend:server');
const app = require('../app');
const http = require('http');
const chalk = require('chalk');
const db = require('../database');
const cache = require('../routes/retrieve/cache');
const analyzer = require('../analyze');
const port = require('../config/consts').LOCAL_HOST_PORT;

app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

async function launch() {
    debug('Initializing...');
    try { // initialize db and reload data
        await db.initialize();
        await cache.initializeHost();
        await analyzer.initialize();
    } catch (err) {
        console.error(chalk.red('Caught fatal error in server!'));
        console.error(err);
        await db.finalize();
        process.exit(1);
    }
    debug('Initialize finished.');
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

launch();
